package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import model.Tarefa;
import service.TarefaService;

public class TarefaDAO {

	public List<Tarefa> listar(){
		List<Tarefa> lista = new ArrayList<Tarefa>();
		Tarefa tarefa = null;
		
		Connection cnx = Dao.getConexao();
		
		String SQL = "SELECT * FROM tarefas";
		
		PreparedStatement ps;
		
		try {
			ps = cnx.prepareStatement(SQL);
			
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				tarefa = new Tarefa();
				
				tarefa.setId(rs.getInt("id"));
				tarefa.setDescricao(rs.getString("descricao"));
				tarefa.setPrazo(rs.getInt("prazo"));
				tarefa.setFinalizada(rs.getBoolean("finalizada"));
				
				lista.add(tarefa);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return lista;
	}
	

	public Tarefa inserirTarefa(String descricao, Integer prazo, boolean finalizada) {
	    Connection cnx = Dao.getConexao();
	    String SQL = "INSERT INTO tarefas (descricao, prazo, finalizada) VALUES (?, ?, ?)";
	    PreparedStatement ps = null;
	    Tarefa tarefa = null;

	    try {
	        ps = cnx.prepareStatement(SQL, PreparedStatement.RETURN_GENERATED_KEYS);
	        ps.setString(1, descricao);
	        ps.setInt(2, prazo);
	        ps.setBoolean(3, finalizada);

	        int linhasAfetadas = ps.executeUpdate();

	        if (linhasAfetadas > 0) {
	            ResultSet rs = ps.getGeneratedKeys();
	            if (rs.next()) {
	                tarefa = new Tarefa();
	                tarefa.setId(rs.getInt(1));
	                tarefa.setDescricao(descricao);
	                tarefa.setPrazo(prazo);
	                tarefa.setFinalizada(finalizada);
	            }
	            rs.close();
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    } 
	    
	    return tarefa;

	}

	
	public List<Tarefa> consultarPorLetra(String descricao){
		List<Tarefa> lista = new ArrayList<Tarefa>();
		Tarefa tarefa = null;
		
		Connection cnx = Dao.getConexao();
		
		String SQL = "SELECT * FROM tarefas WHERE descricao LIKE ?";
		
		PreparedStatement ps;
		
		try {
			ps = cnx.prepareStatement(SQL);
			ps.setString(1, descricao + '%');
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				tarefa = new Tarefa();
				
				tarefa.setId(rs.getInt("id"));
				tarefa.setDescricao(rs.getString("descricao"));
				tarefa.setPrazo(rs.getInt("prazo"));
				tarefa.setFinalizada(rs.getBoolean("finalizada"));
				
				lista.add(tarefa);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return lista;		
		
	}	
	public Tarefa consultarPorId(Integer id){
		List<Tarefa> lista = new ArrayList<Tarefa>();
		Tarefa tarefa = null;
		
		Connection cnx = Dao.getConexao();
		
		String SQL = "SELECT * FROM tarefas WHERE id = ?";
		
		PreparedStatement ps;
		
		try {
			ps = cnx.prepareStatement(SQL);
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				tarefa = new Tarefa();
				
				tarefa.setId(rs.getInt("id"));
				tarefa.setDescricao(rs.getString("descricao"));
				tarefa.setPrazo(rs.getInt("prazo"));
				tarefa.setFinalizada(rs.getBoolean("finalizada"));
				
				lista.add(tarefa);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return tarefa;		
		
	}	
	
	public Tarefa atualizarTarefa(Integer id, String descricao) {
	    Tarefa tarefa = null;
	    Connection cnx = Dao.getConexao();

	    String SQL = "UPDATE tarefas SET descricao = ? WHERE id = ?;";

	    try {
	        PreparedStatement ps = cnx.prepareStatement(SQL);
	        ps.setString(1, descricao);
	        ps.setInt(2, id);
	        
	        int linhasAfetadas = ps.executeUpdate();

	        if (linhasAfetadas > 0) {
	            String confirma = "SELECT * FROM tarefas WHERE id = ?;";
	            PreparedStatement psSelect = cnx.prepareStatement(confirma);
	            psSelect.setInt(1, id);
	            ResultSet rs = psSelect.executeQuery();
	            
	            if (rs.next()) {
	                tarefa = new Tarefa();
	                tarefa.setId(rs.getInt("id"));
	                tarefa.setDescricao(rs.getString("descricao"));
	                tarefa.setPrazo(rs.getInt("prazo"));
	                tarefa.setFinalizada(rs.getBoolean("finalizada"));
	            }
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }

	    return tarefa;
	}
	
	public boolean excluirTarefa(Integer id) {
	    Connection cnx = Dao.getConexao();
	    String SQL = "DELETE FROM tarefas WHERE id = ?";
	    PreparedStatement ps = null;
	    boolean sucesso = false;

	    try {
	        ps = cnx.prepareStatement(SQL);
	        ps.setInt(1, id);

	        int linhasAfetadas = ps.executeUpdate(); // Para DELETE, usamos executeUpdate()
	        sucesso = (linhasAfetadas > 0); // Se alguma linha foi deletada, retorna true
	    } catch (SQLException e) {
	        e.printStackTrace();
	    } 
	    return sucesso;
	}

		
}
